names(df)
names(data)
names(df)
names(data)
cat("\014")
rawData<-occ_data(classKey = 121, country = "AU", hasCoordinate = TRUE, limit = 5000)
library(rgbif)
library(plyr)
rawData<-occ_data(classKey = 121, country = "AU", hasCoordinate = TRUE, limit = 5000)
data<-as.data.frame(s$rawData)
data<-as.data.frame(rawData$Data)
colname <- colnames(data)
class(colname)
colnames(data) <- tolower(colname)
num_dfs <- 5
stripData <- split(data, rep(1:num_dfs, each = round(NROW(data) / num_dfs)))
finalData<- lapply(stripData, add_flags)
formatData<- lapply(finalData, function(df) {
j<-df[,1:111]
h<-df$flags
df<-cbind(j,h)
})
df<-ldply(formatData, rbind)[2:117]
finalData<- lapply(stripData, add_flags)
library(rgeospatialquality)
finalData<- lapply(stripData, add_flags)
formatData<- lapply(finalData, function(df) {
j<-df[,1:111]
h<-df$flags
df<-cbind(j,h)
})
df<-ldply(formatData, rbind)[2:117]
data
data<-as.data.frame(rawData$Data)
data
data<-as.data.frame(rawData$data)
data
colname <- colnames(data)
colnames(data) <- tolower(colname)
num_dfs <- 5
stripData <- split(data, rep(1:num_dfs, each = round(NROW(data) / num_dfs)))
finalData<- lapply(stripData, add_flags)
formatData<- lapply(finalData, function(df) {
j<-df[,1:111]
h<-df$flags
df<-cbind(j,h)
})
df<-ldply(formatData, rbind)[2:117]
df
taxonKey<-name_suggest("Perameles nasuta")
key<-taxonKey$key[1]
data<-occ_search(key)
data<- data$data
colnames(data)<-colname
colnames(data) <- tolower(colname)
colnames(data) <- tolower(colnames(data))
tidyData <- as.data.frame(data)
tidyData <- add_flags(tidyData)
tidyData
taxonKey<-name_suggest("Perameles nasuta")
library(rgbif)
library(rgeospatialquality)
taxonKey<-name_suggest("Perameles nasuta")
taxonKey
d <- occ_data(
scientificName="Apis mellifera",
limit=50,
minimal=FALSE
)
d
data<-occ_search(key)
data
d <- occ_data(
scientificName="Perameles nasuta",
limit=50,
minimal=FALSE
)
d
d <- occ_data(
scientificName="Perameles nasuta pallescens",
limit=50,
minimal=FALSE
)
d
d$data$name
d$data$scientificName
data$data$scientificName
cat("\014")
library(rgbif)
library(rgeospatialquality)
taxonKey<-name_suggest("Perameles nasuta")
key<-taxonKey$key[1]
data<-occ_search(key)
data<- data$data
colnames(data) <- tolower(colnames(data))
tidyData <- as.data.frame(data)
tidyData <- add_flags(tidyData)
tidyData
flaggedData <- add_flags(data)
library(rgeospatialquality)
data <- read.csv("0067842-160910150852091/0067842-160910150852091.csv", header = TRUE, sep = "\t")
data <- data[1:500,]
flaggedData <- add_flags(data)
flaggedData
data <- read.csv("0067842-160910150852091/0067842-160910150852091.csv", header = TRUE, sep = "\t", nrows = 500)
data
flaggedData <- add_flags(data)
flaggedData
NROW(data)
nrow(data)
NCOL(data)
addQualityFlag <-
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colname)
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <- split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:111]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[2:117]
# Returning final data
df
}
addQualityFlag()
addQualityFlag()
# Thiloshon Nagarajah
#
# GSOC
# Integrating Biodiversity Data Curation Functionality.
#
# Test Medium 01.
#
# Function for Retrieving 5000 georeferenced records of Australian mammals from GBIF and adding quality flags.
addQualityFlag <-
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colnames(data))
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <- split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:111]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[2:117]
# Returning final data
df
}
addQualityFlag()
NCOL(df)
df
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
rawData <-
occ_data(
country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121
)
data <- as.data.frame(rawData$data)
colnames(data) <- tolower(colnames(data))
stripData <- split(data, rep(1:5, each = round(NROW(data) / 5)))
finalData <- lapply(stripData, add_flags)
formatData <- lapply(finalData, function(df) {
j <- df[, 1:NCOL(df)-1]
h <- df$flags
df <- cbind(j, h)
})
df <- ldply(formatData, rbind)
names(df)
head(df)
df <- ldply(formatData, rbind)[2:117]
names(df)
df <- ldply(formatData, rbind)[2:NCOL(formatData)+1]
names(df)
NCOL(formatData)+1
NCOL(formatData)
df <- ldply(formatData, rbind)[2:117]
df
browseVignettes()
devtools::use_vignette("my-vignette")
install.packages("devtools")
devtools::use_vignette("my-vignette")
devtools::use_vignette("my-vignette")
library(devtools)
devtools::use_vignette("my-vignette")
?devtools
?`devtools-package`
?devtools::use_vignette()
?devtools::use_vignette
devtools::use_vignette()
dev.control()
devtools::use_vignette("sfdg")
devtools::use_vignette("my-vignette")
devtools::build_vignette()
?occ_data
head(df[,111:116])
head(df[,112:116])
head(df[,112:116])
getwd()
data <-
read.csv(
"0067842-160910150852091/0067842-160910150852091.csv",
header = TRUE,
sep = "\t",
nrows = 500
)
data <-
read.csv(
"Easy/0067842-160910150852091/0067842-160910150852091.csv",
header = TRUE,
sep = "\t",
nrows = 500
)
#' Function for Retrieving 5000 georeferenced records of Australian mammals from GBIF and adding quality flags.
#'
#' @author Thiloshon Nagarajah
#' @description {
#' GSOC
#' Integrating Biodiversity Data Curation Functionality.
#' Test Medium 01.
#' }
#' @param country The 2-letter country code (as per ISO-3166-1)
#' @param hasCoordinate A number
#' @param limit Number of records to return
#' @param classKey Class classification key
#' @return A tidy dataframe of occurancedata and quality flags of fields as specified in parameters.
#' @examples
#' addQualityFlag()
#' addQualityFlag("SL", False, 100, 148)
addQualityFlag <-
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colnames(data))
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <-
split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:NCOL(df) - 1]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[2:117]
# Returning final data
df
}
install.packages("roxygen2")
#' @author Thiloshon Nagarajah
#' @description {
#' GSOC
#' Integrating Biodiversity Data Curation Functionality.
#' Test Medium 01.
#' }
#' @param country The 2-letter country code (as per ISO-3166-1)
#' @param hasCoordinate A number
#' @param limit Number of records to return
#' @param classKey Class classification key
#' @return A tidy dataframe of occurancedata and quality flags of fields as specified in parameters.
#' @examples
addQualityFlag()
devtools::load_all("Medium")
#' @param classKey Class classification key
source('C:/Users/Thiloshon/RProjects/GSOC/Medium/medium01.R')
#' Function for Retrieving 5000 georeferenced records of Australian mammals from GBIF and adding quality flags.
#'
#' @author Thiloshon Nagarajah
#' @description {
#' GSOC
#' Integrating Biodiversity Data Curation Functionality.
#' Test Medium 01.
#' }
#' @param country The 2-letter country code (as per ISO-3166-1)
#' @param hasCoordinate A number
#' @param limit Number of records to return
#' @param classKey Class classification key
#' @return A tidy dataframe of occurancedata and quality flags of fields as specified in parameters.
#' @examples
#' addQualityFlag()
#' addQualityFlag("SL", False, 100, 148)
addQualityFlag <-
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colnames(data))
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <-
split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:NCOL(df) - 1]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[2:117]
# Returning final data
df
}
roxygen2::roxygenise()
roxygen2::roxygenise()
?roxygen2::roxygenise()
library(roxygen2)
?roxygen2::roxygenise()
roxygen2::roxygenise()
roxygenise()
getwd()
roxygenise("easy01.r")
source_package("/medium")
browseVignettes("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
taxonKey<-name_suggest("Perameles nasuta")
library(rgbif)
library(rgeospatialquality)
taxonKey<-name_suggest("Perameles nasuta")
key<-taxonKey$key[1]
data<-occ_search(key) #default limit = 500
data
names(data)
names(data$data)
data$meta
names(data$"Seatbelts")
library(rgbif)
library(plyr)
library(rgeospatialquality)
occ_count()
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colnames(data))
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <-
split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:NCOL(df) - 1]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[2:117]
# Returning final data
df
}
addQualityFlag(limit = 10)
addQualityFlag()
addQualityFlag()
addQualityFlag()
addQualityFlag()
#' Function for Retrieving 5000 georeferenced records of Australian mammals from GBIF and adding quality flags.
#'
#' @author Thiloshon Nagarajah
#' @description {
#' GSOC
#' Integrating Biodiversity Data Curation Functionality.
#' Test Medium 01.
#' }
#' @param country The 2-letter country code (as per ISO-3166-1)
#' @param hasCoordinate A number
#' @param limit Number of records to return
#' @param classKey Class classification key
#' @return A tidy dataframe of occurancedata and quality flags of fields as specified in parameters.
#' @examples
#' addQualityFlag()
#' addQualityFlag("SL", False, 100, 148)
addQualityFlag <-
function(country = "AU",
hasCoordinate = TRUE,
limit = 5000,
classKey = 121) {
# Required Libraries
library(rgbif)
library(plyr)
library(rgeospatialquality)
# Retrieving data
rawData <-
occ_data(
classKey = classKey,
country = country,
hasCoordinate = hasCoordinate,
limit = limit
)
data <- as.data.frame(rawData$data)
# Making coloumn names simplecase
colnames(data) <- tolower(colnames(data))
# Splitting data into 5 components of 1000 records each since only 1000 records
#   can be sent through rgeospatialquality API
stripData <-
split(data, rep(1:5, each = round(NROW(data) / 5)))
# Adding flags to each component
finalData <- lapply(stripData, add_flags)
# Collapsing flags dataframe in data dataframe returned by the API.
formatData <- lapply(finalData, function(df) {
j <- df[, 1:NCOL(df) - 1]
h <- df$flags
df <- cbind(j, h)
})
# Combining the split data
df <- ldply(formatData, rbind)[,2:117]
# Returning final data
df
}
addQualityFlag(limit = 10)
